#Использовать TRun1C
#Использовать configor
#Использовать logos

#Область ОписаниеПеременных

Перем Базы;
Перем ВерсияПриложения;

#КонецОбласти

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Процедура ПолезнаяРабота()
	
	ЗагрузитьНастройки();
	
	Для Каждого База Из Базы Цикл
		
		ПутьКФайлуКопии = СформироватьПутьКФайлуКопии(База.КонтекстВыгрузки, База.Настройки);
		ВыгрузитьБазу(База.КонтекстВыгрузки, База.Настройки, ПутьКФайлуКопии);

		Если Не База.Настройки["ТолькоВыгрузка"] Тогда
			 ЗагрузитьБазу(База.КонтекстЗагрузки, База.Настройки, ПутьКФайлуКопии);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ЗагрузитьНастройки()

	МенеджерПараметров = Новый МенеджерПараметров();
	МенеджерПараметров.АвтоНастройка("config");
	МенеджерПараметров.УстановитьФайлПараметров("env.json");
	МенеджерПараметров.Прочитать();
	
	Если МенеджерПараметров.ЧтениеВыполнено() Тогда

		Базы = Новый Массив;

		НастройкиОбщие = МенеджерПараметров.Параметр("Настройки.Общие");
		
		НастройкиИнформационныеБазы = МенеджерПараметров.Параметр("Настройки.ИнформационныеБазы");
		
		Для Каждого Элем Из НастройкиИнформационныеБазы Цикл

			База = Новый Структура;

			Настройки = Элем["Настройки"];
			
			НастройкиБазы = ПереопределитьНастройки(Настройки, НастройкиОбщие);

			База.Вставить("Настройки", НастройкиБазы);

			НастройкиВыгрузки = Элем["НастройкиВыгрузки"];
			КонтекстВыгрузки = ПолучитьКонтекст(НастройкиВыгрузки);
			База.Вставить("КонтекстВыгрузки", КонтекстВыгрузки);
			
			Если Не НастройкиБазы["ТолькоВыгрузка"] Тогда
			
				НастройкиЗагрузки = Элем["НастройкиЗагрузки"];
				КонтекстЗагрузки = ПолучитьКонтекст(НастройкиЗагрузки);
				База.Вставить("КонтекстЗагрузки", КонтекстЗагрузки);
			
			КонецЕсли;

			Базы.Добавить(База);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Функция ПереопределитьНастройки(Знач Настройки, НастройкиОбщие)

	Для Каждого Элем Из НастройкиОбщие Цикл
		Если Настройки.Получить(Элем.Ключ) = Неопределено Тогда
			Настройки.Вставить(Элем.Ключ, Элем.Значение);
		КонецЕсли;
	КонецЦикла;

	Возврат Настройки;

КонецФункции
Функция ПолучитьКонтекст(Настройки)
	
	Контекст = Новый ТУправлениеЗапуском1С();

	Для Каждого Элем Из Настройки Цикл
		Контекст.ПараметрыЗапуска[Элем.Ключ] = Элем.Значение;
	КонецЦикла;
	
	Возврат Контекст;

КонецФункции

Функция СформироватьПутьКФайлуКопии(Контекст, Настройки)

	КаталогКопий = Настройки["КаталогКопий"];

	ИмяФайлаКопии = Контекст.ИмяФайлаПоИмениБазыНаДату("dt");
	ПутьКФайлуКопии = ОбъединитьПути(КаталогКопий, ИмяФайлаКопии);

	Возврат ПутьКФайлуКопии;

КонецФункции

#КонецОбласти

Процедура ВыгрузитьБазу(Контекст, Настройки, ПутьКФайлуКопии)
	
	Если Настройки["ЗавершатьСеансы"] Тогда
		Контекст.ЗавершитьРаботуПользователей();
	КонецЕсли;

	Если Настройки["БлокироватьВход"] Тогда
		Контекст.УстановитьБлокировкуНачалаСеансов(Истина);
	КонецЕсли;
	
	Контекст.ВыгрузитьИнформационнуюБазу(ПутьКФайлуКопии);
	
	Если Настройки["БлокироватьВход"] Тогда
		Контекст.СнятьБлокировкуНачалаСеансов(Истина);
	КонецЕсли;

КонецПроцедуры

Процедура ЗагрузитьБазу(Контекст, Настройки, ПутьКФайлуКопии)
	
 	Если Настройки["ЗавершатьСеансы"] Тогда
 		Контекст.ЗавершитьРаботуПользователей();
 	КонецЕсли;
	
 	Если Настройки["БлокироватьВход"] Тогда
 		Контекст.УстановитьБлокировкуНачалаСеансов(Истина);
 	КонецЕсли;

	Контекст.ЗагрузитьИнформационнуюБазу(ПутьКФайлуКопии);

 	Если Настройки["БлокироватьВход"] Тогда
 		Контекст.СнятьБлокировкуНачалаСеансов(Истина);
 	КонецЕсли;

КонецПроцедуры

ВерсияПриложения = "0.4 alpha";
ПолезнаяРабота();